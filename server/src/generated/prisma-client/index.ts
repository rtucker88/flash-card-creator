// Code generated by Prisma (prisma@1.18.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  paragraph: (where?: ParagraphWhereInput) => Promise<boolean>;
  sentence: (where?: SentenceWhereInput) => Promise<boolean>;
  translation: (where?: TranslationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  word: (where?: WordWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => Article;
  articles: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ArticleNode>;
  articlesConnection: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticleConnection;
  paragraph: (where: ParagraphWhereUniqueInput) => Paragraph;
  paragraphs: (
    args?: {
      where?: ParagraphWhereInput;
      orderBy?: ParagraphOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ParagraphNode>;
  paragraphsConnection: (
    args?: {
      where?: ParagraphWhereInput;
      orderBy?: ParagraphOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ParagraphConnection;
  sentence: (where: SentenceWhereUniqueInput) => Sentence;
  sentences: (
    args?: {
      where?: SentenceWhereInput;
      orderBy?: SentenceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SentenceNode>;
  sentencesConnection: (
    args?: {
      where?: SentenceWhereInput;
      orderBy?: SentenceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SentenceConnection;
  translations: (
    args?: {
      where?: TranslationWhereInput;
      orderBy?: TranslationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<TranslationNode>;
  translationsConnection: (
    args?: {
      where?: TranslationWhereInput;
      orderBy?: TranslationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TranslationConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  word: (where: WordWhereUniqueInput) => Word;
  words: (
    args?: {
      where?: WordWhereInput;
      orderBy?: WordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WordNode>;
  wordsConnection: (
    args?: {
      where?: WordWhereInput;
      orderBy?: WordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WordConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => Article;
  updateArticle: (
    args: { data: ArticleUpdateInput; where: ArticleWhereUniqueInput }
  ) => Article;
  updateManyArticles: (
    args: { data: ArticleUpdateInput; where?: ArticleWhereInput }
  ) => BatchPayload;
  upsertArticle: (
    args: {
      where: ArticleWhereUniqueInput;
      create: ArticleCreateInput;
      update: ArticleUpdateInput;
    }
  ) => Article;
  deleteArticle: (where: ArticleWhereUniqueInput) => Article;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayload;
  createParagraph: (data: ParagraphCreateInput) => Paragraph;
  updateParagraph: (
    args: { data: ParagraphUpdateInput; where: ParagraphWhereUniqueInput }
  ) => Paragraph;
  updateManyParagraphs: (
    args: { data: ParagraphUpdateInput; where?: ParagraphWhereInput }
  ) => BatchPayload;
  upsertParagraph: (
    args: {
      where: ParagraphWhereUniqueInput;
      create: ParagraphCreateInput;
      update: ParagraphUpdateInput;
    }
  ) => Paragraph;
  deleteParagraph: (where: ParagraphWhereUniqueInput) => Paragraph;
  deleteManyParagraphs: (where?: ParagraphWhereInput) => BatchPayload;
  createSentence: (data: SentenceCreateInput) => Sentence;
  updateSentence: (
    args: { data: SentenceUpdateInput; where: SentenceWhereUniqueInput }
  ) => Sentence;
  updateManySentences: (
    args: { data: SentenceUpdateInput; where?: SentenceWhereInput }
  ) => BatchPayload;
  upsertSentence: (
    args: {
      where: SentenceWhereUniqueInput;
      create: SentenceCreateInput;
      update: SentenceUpdateInput;
    }
  ) => Sentence;
  deleteSentence: (where: SentenceWhereUniqueInput) => Sentence;
  deleteManySentences: (where?: SentenceWhereInput) => BatchPayload;
  createTranslation: (data: TranslationCreateInput) => Translation;
  updateManyTranslations: (
    args: { data: TranslationUpdateInput; where?: TranslationWhereInput }
  ) => BatchPayload;
  deleteManyTranslations: (where?: TranslationWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;
  createWord: (data: WordCreateInput) => Word;
  updateWord: (
    args: { data: WordUpdateInput; where: WordWhereUniqueInput }
  ) => Word;
  updateManyWords: (
    args: { data: WordUpdateInput; where?: WordWhereInput }
  ) => BatchPayload;
  upsertWord: (
    args: {
      where: WordWhereUniqueInput;
      create: WordCreateInput;
      update: WordUpdateInput;
    }
  ) => Word;
  deleteWord: (where: WordWhereUniqueInput) => Word;
  deleteManyWords: (where?: WordWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  paragraph: (
    where?: ParagraphSubscriptionWhereInput
  ) => ParagraphSubscriptionPayloadSubscription;
  sentence: (
    where?: SentenceSubscriptionWhereInput
  ) => SentenceSubscriptionPayloadSubscription;
  translation: (
    where?: TranslationSubscriptionWhereInput
  ) => TranslationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  word: (
    where?: WordSubscriptionWhereInput
  ) => WordSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ParagraphOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SentenceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "value_ASC"
  | "value_DESC"
  | "unknown_ASC"
  | "unknown_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "fromLanguage_ASC"
  | "fromLanguage_DESC"
  | "toLanguage_ASC"
  | "toLanguage_DESC";

export type TranslationOrderByInput =
  | "from_ASC"
  | "from_DESC"
  | "to_ASC"
  | "to_DESC"
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ParagraphCreateInput {
  sentences?: SentenceCreateManyInput;
}

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ParagraphWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  sentences_every?: SentenceWhereInput;
  sentences_some?: SentenceWhereInput;
  sentences_none?: SentenceWhereInput;
  AND?: ParagraphWhereInput[] | ParagraphWhereInput;
  OR?: ParagraphWhereInput[] | ParagraphWhereInput;
  NOT?: ParagraphWhereInput[] | ParagraphWhereInput;
}

export interface UserCreateInput {
  email: String;
}

export interface ParagraphUpsertWithWhereUniqueNestedInput {
  where: ParagraphWhereUniqueInput;
  update: ParagraphUpdateDataInput;
  create: ParagraphCreateInput;
}

export interface WordCreateInput {
  value: String;
  unknown?: Boolean;
}

export interface SentenceUpsertWithWhereUniqueNestedInput {
  where: SentenceWhereUniqueInput;
  update: SentenceUpdateDataInput;
  create: SentenceCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WordUpsertWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  update: WordUpdateDataInput;
  create: WordCreateInput;
}

export interface TranslationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TranslationWhereInput;
  AND?: TranslationSubscriptionWhereInput[] | TranslationSubscriptionWhereInput;
  OR?: TranslationSubscriptionWhereInput[] | TranslationSubscriptionWhereInput;
  NOT?: TranslationSubscriptionWhereInput[] | TranslationSubscriptionWhereInput;
}

export interface WordUpdateDataInput {
  value?: String;
  unknown?: Boolean;
}

export interface ParagraphSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ParagraphWhereInput;
  AND?: ParagraphSubscriptionWhereInput[] | ParagraphSubscriptionWhereInput;
  OR?: ParagraphSubscriptionWhereInput[] | ParagraphSubscriptionWhereInput;
  NOT?: ParagraphSubscriptionWhereInput[] | ParagraphSubscriptionWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface WordUpdateWithWhereUniqueNestedInput {
  where: WordWhereUniqueInput;
  data: WordUpdateDataInput;
}

export interface ArticleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticleWhereInput;
  AND?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  OR?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  NOT?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
}

export interface WordUpdateManyInput {
  create?: WordCreateInput[] | WordCreateInput;
  update?:
    | WordUpdateWithWhereUniqueNestedInput[]
    | WordUpdateWithWhereUniqueNestedInput;
  upsert?:
    | WordUpsertWithWhereUniqueNestedInput[]
    | WordUpsertWithWhereUniqueNestedInput;
  delete?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  connect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
  disconnect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
}

export interface SentenceUpdateDataInput {
  words?: WordUpdateManyInput;
}

export type ParagraphWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SentenceUpdateWithWhereUniqueNestedInput {
  where: SentenceWhereUniqueInput;
  data: SentenceUpdateDataInput;
}

export interface SentenceUpdateInput {
  words?: WordUpdateManyInput;
}

export type WordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type SentenceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SentenceUpdateManyInput {
  create?: SentenceCreateInput[] | SentenceCreateInput;
  update?:
    | SentenceUpdateWithWhereUniqueNestedInput[]
    | SentenceUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SentenceUpsertWithWhereUniqueNestedInput[]
    | SentenceUpsertWithWhereUniqueNestedInput;
  delete?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
  disconnect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
}

export interface UserUpdateDataInput {
  email?: String;
}

export interface ParagraphUpdateDataInput {
  sentences?: SentenceUpdateManyInput;
}

export interface TranslationWhereInput {
  from?: String;
  from_not?: String;
  from_in?: String[] | String;
  from_not_in?: String[] | String;
  from_lt?: String;
  from_lte?: String;
  from_gt?: String;
  from_gte?: String;
  from_contains?: String;
  from_not_contains?: String;
  from_starts_with?: String;
  from_not_starts_with?: String;
  from_ends_with?: String;
  from_not_ends_with?: String;
  to?: String;
  to_not?: String;
  to_in?: String[] | String;
  to_not_in?: String[] | String;
  to_lt?: String;
  to_lte?: String;
  to_gt?: String;
  to_gte?: String;
  to_contains?: String;
  to_not_contains?: String;
  to_starts_with?: String;
  to_not_starts_with?: String;
  to_ends_with?: String;
  to_not_ends_with?: String;
  AND?: TranslationWhereInput[] | TranslationWhereInput;
  OR?: TranslationWhereInput[] | TranslationWhereInput;
  NOT?: TranslationWhereInput[] | TranslationWhereInput;
}

export interface ParagraphUpdateWithWhereUniqueNestedInput {
  where: ParagraphWhereUniqueInput;
  data: ParagraphUpdateDataInput;
}

export interface WordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  unknown?: Boolean;
  unknown_not?: Boolean;
  AND?: WordWhereInput[] | WordWhereInput;
  OR?: WordWhereInput[] | WordWhereInput;
  NOT?: WordWhereInput[] | WordWhereInput;
}

export interface ArticleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  paragraphs_every?: ParagraphWhereInput;
  paragraphs_some?: ParagraphWhereInput;
  paragraphs_none?: ParagraphWhereInput;
  createdBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  fromLanguage?: String;
  fromLanguage_not?: String;
  fromLanguage_in?: String[] | String;
  fromLanguage_not_in?: String[] | String;
  fromLanguage_lt?: String;
  fromLanguage_lte?: String;
  fromLanguage_gt?: String;
  fromLanguage_gte?: String;
  fromLanguage_contains?: String;
  fromLanguage_not_contains?: String;
  fromLanguage_starts_with?: String;
  fromLanguage_not_starts_with?: String;
  fromLanguage_ends_with?: String;
  fromLanguage_not_ends_with?: String;
  toLanguage?: String;
  toLanguage_not?: String;
  toLanguage_in?: String[] | String;
  toLanguage_not_in?: String[] | String;
  toLanguage_lt?: String;
  toLanguage_lte?: String;
  toLanguage_gt?: String;
  toLanguage_gte?: String;
  toLanguage_contains?: String;
  toLanguage_not_contains?: String;
  toLanguage_starts_with?: String;
  toLanguage_not_starts_with?: String;
  toLanguage_ends_with?: String;
  toLanguage_not_ends_with?: String;
  AND?: ArticleWhereInput[] | ArticleWhereInput;
  OR?: ArticleWhereInput[] | ArticleWhereInput;
  NOT?: ArticleWhereInput[] | ArticleWhereInput;
}

export interface WordUpdateInput {
  value?: String;
  unknown?: Boolean;
}

export interface ArticleCreateInput {
  title: String;
  paragraphs?: ParagraphCreateManyInput;
  createdBy: UserCreateOneInput;
  fromLanguage: String;
  toLanguage: String;
}

export interface TranslationCreateInput {
  from: String;
  to: String;
}

export interface ParagraphCreateManyInput {
  create?: ParagraphCreateInput[] | ParagraphCreateInput;
  connect?: ParagraphWhereUniqueInput[] | ParagraphWhereUniqueInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ParagraphUpdateManyInput {
  create?: ParagraphCreateInput[] | ParagraphCreateInput;
  update?:
    | ParagraphUpdateWithWhereUniqueNestedInput[]
    | ParagraphUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ParagraphUpsertWithWhereUniqueNestedInput[]
    | ParagraphUpsertWithWhereUniqueNestedInput;
  delete?: ParagraphWhereUniqueInput[] | ParagraphWhereUniqueInput;
  connect?: ParagraphWhereUniqueInput[] | ParagraphWhereUniqueInput;
  disconnect?: ParagraphWhereUniqueInput[] | ParagraphWhereUniqueInput;
}

export interface WordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WordWhereInput;
  AND?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
  OR?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
  NOT?: WordSubscriptionWhereInput[] | WordSubscriptionWhereInput;
}

export interface SentenceCreateManyInput {
  create?: SentenceCreateInput[] | SentenceCreateInput;
  connect?: SentenceWhereUniqueInput[] | SentenceWhereUniqueInput;
}

export interface SentenceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  words_every?: WordWhereInput;
  words_some?: WordWhereInput;
  words_none?: WordWhereInput;
  AND?: SentenceWhereInput[] | SentenceWhereInput;
  OR?: SentenceWhereInput[] | SentenceWhereInput;
  NOT?: SentenceWhereInput[] | SentenceWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface ArticleUpdateInput {
  title?: String;
  paragraphs?: ParagraphUpdateManyInput;
  createdBy?: UserUpdateOneRequiredInput;
  fromLanguage?: String;
  toLanguage?: String;
}

export interface WordCreateManyInput {
  create?: WordCreateInput[] | WordCreateInput;
  connect?: WordWhereUniqueInput[] | WordWhereUniqueInput;
}

export interface SentenceCreateInput {
  words?: WordCreateManyInput;
}

export interface TranslationUpdateInput {
  from?: String;
  to?: String;
}

export interface SentenceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SentenceWhereInput;
  AND?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  OR?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
  NOT?: SentenceSubscriptionWhereInput[] | SentenceSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface ParagraphUpdateInput {
  sentences?: SentenceUpdateManyInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WordPreviousValuesNode {
  id: ID_Output;
  value: String;
  unknown: Boolean;
}

export interface WordPreviousValues
  extends Promise<WordPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  unknown: () => Promise<Boolean>;
}

export interface WordPreviousValuesSubscription
  extends Promise<AsyncIterator<WordPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  unknown: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateArticleNode {
  count: Int;
}

export interface AggregateArticle
  extends Promise<AggregateArticleNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticleNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ParagraphNode {
  id: ID_Output;
}

export interface Paragraph extends Promise<ParagraphNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  sentences: <T = FragmentableArray<SentenceNode>>(
    args?: {
      where?: SentenceWhereInput;
      orderBy?: SentenceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ParagraphSubscription
  extends Promise<AsyncIterator<ParagraphNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sentences: <T = Promise<AsyncIterator<SentenceSubscription>>>(
    args?: {
      where?: SentenceWhereInput;
      orderBy?: SentenceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ArticleEdgeNode {
  cursor: String;
}

export interface ArticleEdge extends Promise<ArticleEdgeNode>, Fragmentable {
  node: <T = Article>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdgeNode>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWordNode {
  count: Int;
}

export interface AggregateWord
  extends Promise<AggregateWordNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWordSubscription
  extends Promise<AsyncIterator<AggregateWordNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WordConnectionNode {}

export interface WordConnection
  extends Promise<WordConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<WordEdgeNode>>() => T;
  aggregate: <T = AggregateWord>() => T;
}

export interface WordConnectionSubscription
  extends Promise<AsyncIterator<WordConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWordSubscription>() => T;
}

export interface ArticleConnectionNode {}

export interface ArticleConnection
  extends Promise<ArticleConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ArticleEdgeNode>>() => T;
  aggregate: <T = AggregateArticle>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SentenceNode {
  id: ID_Output;
}

export interface Sentence extends Promise<SentenceNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  words: <T = FragmentableArray<WordNode>>(
    args?: {
      where?: WordWhereInput;
      orderBy?: WordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface SentenceSubscription
  extends Promise<AsyncIterator<SentenceNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  words: <T = Promise<AsyncIterator<WordSubscription>>>(
    args?: {
      where?: WordWhereInput;
      orderBy?: WordOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ArticleNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  fromLanguage: String;
  toLanguage: String;
}

export interface Article extends Promise<ArticleNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  paragraphs: <T = FragmentableArray<ParagraphNode>>(
    args?: {
      where?: ParagraphWhereInput;
      orderBy?: ParagraphOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = User>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  fromLanguage: () => Promise<String>;
  toLanguage: () => Promise<String>;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<ArticleNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  paragraphs: <T = Promise<AsyncIterator<ParagraphSubscription>>>(
    args?: {
      where?: ParagraphWhereInput;
      orderBy?: ParagraphOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  fromLanguage: () => Promise<AsyncIterator<String>>;
  toLanguage: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTranslationNode {
  count: Int;
}

export interface AggregateTranslation
  extends Promise<AggregateTranslationNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTranslationSubscription
  extends Promise<AsyncIterator<AggregateTranslationNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TranslationConnectionNode {}

export interface TranslationConnection
  extends Promise<TranslationConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<TranslationEdgeNode>>() => T;
  aggregate: <T = AggregateTranslation>() => T;
}

export interface TranslationConnectionSubscription
  extends Promise<AsyncIterator<TranslationConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TranslationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTranslationSubscription>() => T;
}

export interface ArticleSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticleSubscriptionPayload
  extends Promise<ArticleSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Article>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValues>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface AggregateSentenceNode {
  count: Int;
}

export interface AggregateSentence
  extends Promise<AggregateSentenceNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSentenceSubscription
  extends Promise<AsyncIterator<AggregateSentenceNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticlePreviousValuesNode {
  id: ID_Output;
  title: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  fromLanguage: String;
  toLanguage: String;
}

export interface ArticlePreviousValues
  extends Promise<ArticlePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  fromLanguage: () => Promise<String>;
  toLanguage: () => Promise<String>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  fromLanguage: () => Promise<AsyncIterator<String>>;
  toLanguage: () => Promise<AsyncIterator<String>>;
}

export interface SentenceConnectionNode {}

export interface SentenceConnection
  extends Promise<SentenceConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<SentenceEdgeNode>>() => T;
  aggregate: <T = AggregateSentence>() => T;
}

export interface SentenceConnectionSubscription
  extends Promise<AsyncIterator<SentenceConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SentenceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSentenceSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface WordSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface WordSubscriptionPayload
  extends Promise<WordSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Word>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WordPreviousValues>() => T;
}

export interface WordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WordSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WordPreviousValuesSubscription>() => T;
}

export interface ParagraphSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ParagraphSubscriptionPayload
  extends Promise<ParagraphSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Paragraph>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ParagraphPreviousValues>() => T;
}

export interface ParagraphSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ParagraphSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ParagraphSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ParagraphPreviousValuesSubscription>() => T;
}

export interface ParagraphEdgeNode {
  cursor: String;
}

export interface ParagraphEdge
  extends Promise<ParagraphEdgeNode>,
    Fragmentable {
  node: <T = Paragraph>() => T;
  cursor: () => Promise<String>;
}

export interface ParagraphEdgeSubscription
  extends Promise<AsyncIterator<ParagraphEdgeNode>>,
    Fragmentable {
  node: <T = ParagraphSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ParagraphPreviousValuesNode {
  id: ID_Output;
}

export interface ParagraphPreviousValues
  extends Promise<ParagraphPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface ParagraphPreviousValuesSubscription
  extends Promise<AsyncIterator<ParagraphPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  email: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: ID_Output;
  email: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface TranslationEdgeNode {
  cursor: String;
}

export interface TranslationEdge
  extends Promise<TranslationEdgeNode>,
    Fragmentable {
  node: <T = Translation>() => T;
  cursor: () => Promise<String>;
}

export interface TranslationEdgeSubscription
  extends Promise<AsyncIterator<TranslationEdgeNode>>,
    Fragmentable {
  node: <T = TranslationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SentenceSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SentenceSubscriptionPayload
  extends Promise<SentenceSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Sentence>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SentencePreviousValues>() => T;
}

export interface SentenceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SentenceSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SentenceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SentencePreviousValuesSubscription>() => T;
}

export interface SentenceEdgeNode {
  cursor: String;
}

export interface SentenceEdge extends Promise<SentenceEdgeNode>, Fragmentable {
  node: <T = Sentence>() => T;
  cursor: () => Promise<String>;
}

export interface SentenceEdgeSubscription
  extends Promise<AsyncIterator<SentenceEdgeNode>>,
    Fragmentable {
  node: <T = SentenceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateParagraphNode {
  count: Int;
}

export interface AggregateParagraph
  extends Promise<AggregateParagraphNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateParagraphSubscription
  extends Promise<AsyncIterator<AggregateParagraphNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TranslationPreviousValuesNode {
  from: String;
  to: String;
}

export interface TranslationPreviousValues
  extends Promise<TranslationPreviousValuesNode>,
    Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
}

export interface TranslationPreviousValuesSubscription
  extends Promise<AsyncIterator<TranslationPreviousValuesNode>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
}

export interface TranslationSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TranslationSubscriptionPayload
  extends Promise<TranslationSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Translation>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TranslationPreviousValues>() => T;
}

export interface TranslationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TranslationSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TranslationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TranslationPreviousValuesSubscription>() => T;
}

export interface WordNode {
  id: ID_Output;
  value: String;
  unknown: Boolean;
}

export interface Word extends Promise<WordNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  value: () => Promise<String>;
  unknown: () => Promise<Boolean>;
}

export interface WordSubscription
  extends Promise<AsyncIterator<WordNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  value: () => Promise<AsyncIterator<String>>;
  unknown: () => Promise<AsyncIterator<Boolean>>;
}

export interface SentencePreviousValuesNode {
  id: ID_Output;
}

export interface SentencePreviousValues
  extends Promise<SentencePreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SentencePreviousValuesSubscription
  extends Promise<AsyncIterator<SentencePreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface ParagraphConnectionNode {}

export interface ParagraphConnection
  extends Promise<ParagraphConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ParagraphEdgeNode>>() => T;
  aggregate: <T = AggregateParagraph>() => T;
}

export interface ParagraphConnectionSubscription
  extends Promise<AsyncIterator<ParagraphConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ParagraphEdgeSubscription>>>() => T;
  aggregate: <T = AggregateParagraphSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TranslationNode {
  from: String;
  to: String;
}

export interface Translation extends Promise<TranslationNode>, Fragmentable {
  from: () => Promise<String>;
  to: () => Promise<String>;
}

export interface TranslationSubscription
  extends Promise<AsyncIterator<TranslationNode>>,
    Fragmentable {
  from: () => Promise<AsyncIterator<String>>;
  to: () => Promise<AsyncIterator<String>>;
}

export interface WordEdgeNode {
  cursor: String;
}

export interface WordEdge extends Promise<WordEdgeNode>, Fragmentable {
  node: <T = Word>() => T;
  cursor: () => Promise<String>;
}

export interface WordEdgeSubscription
  extends Promise<AsyncIterator<WordEdgeNode>>,
    Fragmentable {
  node: <T = WordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
